// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: room/proto/room.proto

package room

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Room service

type RoomService interface {
	AddRoom(ctx context.Context, in *AddRoomRequest, opts ...client.CallOption) (*AddRoomResponse, error)
	RemoveRoomByID(ctx context.Context, in *RemoveRoomByIDRequest, opts ...client.CallOption) (*RemoveRoomByIDResponse, error)
	ShowAllRooms(ctx context.Context, in *ShowAllRoomsRequest, opts ...client.CallOption) (*ShowAllRoomsResponse, error)
	FindRoomByID(ctx context.Context, in *FindRoomByIDRequest, opts ...client.CallOption) (*FindRoomByIDResponse, error)
	SetRoomAvailability(ctx context.Context, in *SetRoomAvailabilityRequest, opts ...client.CallOption) (*SetRoomAvailabilityResponse, error)
}

type roomService struct {
	c    client.Client
	name string
}

func NewRoomService(name string, c client.Client) RoomService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "room"
	}
	return &roomService{
		c:    c,
		name: name,
	}
}

func (c *roomService) AddRoom(ctx context.Context, in *AddRoomRequest, opts ...client.CallOption) (*AddRoomResponse, error) {
	req := c.c.NewRequest(c.name, "Room.AddRoom", in)
	out := new(AddRoomResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) RemoveRoomByID(ctx context.Context, in *RemoveRoomByIDRequest, opts ...client.CallOption) (*RemoveRoomByIDResponse, error) {
	req := c.c.NewRequest(c.name, "Room.RemoveRoomByID", in)
	out := new(RemoveRoomByIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) ShowAllRooms(ctx context.Context, in *ShowAllRoomsRequest, opts ...client.CallOption) (*ShowAllRoomsResponse, error) {
	req := c.c.NewRequest(c.name, "Room.ShowAllRooms", in)
	out := new(ShowAllRoomsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) FindRoomByID(ctx context.Context, in *FindRoomByIDRequest, opts ...client.CallOption) (*FindRoomByIDResponse, error) {
	req := c.c.NewRequest(c.name, "Room.FindRoomByID", in)
	out := new(FindRoomByIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) SetRoomAvailability(ctx context.Context, in *SetRoomAvailabilityRequest, opts ...client.CallOption) (*SetRoomAvailabilityResponse, error) {
	req := c.c.NewRequest(c.name, "Room.SetRoomAvailability", in)
	out := new(SetRoomAvailabilityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Room service

type RoomHandler interface {
	AddRoom(context.Context, *AddRoomRequest, *AddRoomResponse) error
	RemoveRoomByID(context.Context, *RemoveRoomByIDRequest, *RemoveRoomByIDResponse) error
	ShowAllRooms(context.Context, *ShowAllRoomsRequest, *ShowAllRoomsResponse) error
	FindRoomByID(context.Context, *FindRoomByIDRequest, *FindRoomByIDResponse) error
	SetRoomAvailability(context.Context, *SetRoomAvailabilityRequest, *SetRoomAvailabilityResponse) error
}

func RegisterRoomHandler(s server.Server, hdlr RoomHandler, opts ...server.HandlerOption) error {
	type room interface {
		AddRoom(ctx context.Context, in *AddRoomRequest, out *AddRoomResponse) error
		RemoveRoomByID(ctx context.Context, in *RemoveRoomByIDRequest, out *RemoveRoomByIDResponse) error
		ShowAllRooms(ctx context.Context, in *ShowAllRoomsRequest, out *ShowAllRoomsResponse) error
		FindRoomByID(ctx context.Context, in *FindRoomByIDRequest, out *FindRoomByIDResponse) error
		SetRoomAvailability(ctx context.Context, in *SetRoomAvailabilityRequest, out *SetRoomAvailabilityResponse) error
	}
	type Room struct {
		room
	}
	h := &roomHandler{hdlr}
	return s.Handle(s.NewHandler(&Room{h}, opts...))
}

type roomHandler struct {
	RoomHandler
}

func (h *roomHandler) AddRoom(ctx context.Context, in *AddRoomRequest, out *AddRoomResponse) error {
	return h.RoomHandler.AddRoom(ctx, in, out)
}

func (h *roomHandler) RemoveRoomByID(ctx context.Context, in *RemoveRoomByIDRequest, out *RemoveRoomByIDResponse) error {
	return h.RoomHandler.RemoveRoomByID(ctx, in, out)
}

func (h *roomHandler) ShowAllRooms(ctx context.Context, in *ShowAllRoomsRequest, out *ShowAllRoomsResponse) error {
	return h.RoomHandler.ShowAllRooms(ctx, in, out)
}

func (h *roomHandler) FindRoomByID(ctx context.Context, in *FindRoomByIDRequest, out *FindRoomByIDResponse) error {
	return h.RoomHandler.FindRoomByID(ctx, in, out)
}

func (h *roomHandler) SetRoomAvailability(ctx context.Context, in *SetRoomAvailabilityRequest, out *SetRoomAvailabilityResponse) error {
	return h.RoomHandler.SetRoomAvailability(ctx, in, out)
}
